swagger: "2.0"
info:
  title: Auto Test Case API
  version: "1.0"
  description: API for managing test projects, scenarios, test cases, and test runs
tags:
  - name: Project
    description: Project management endpoints
  - name: Document
    description: Document management endpoints
  - name: Scenario
    description: Test scenario management endpoints
  - name: Workflow
    description: Workflow management endpoints
  - name: Codex
    description: Codex integration endpoints
  - name: FixChain
    description: FixChain AI bug detection and RAG system endpoints

paths:
  /api/ping:
    get:
      summary: Health check endpoint
      tags: [Project]
      operationId: controllers.ping.ping
      responses:
        "200":
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string

  /api/project/create:
    post:
      summary: Create a new project
      tags: [Project]
      operationId: controllers.project.create
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [name]
            properties:
              name:
                type: string
              description:
                type: string
              owner:
                type: string
              is_current:
                type: boolean
              dify_api_keys:
                type: array
                items:
                  type: object
                  required: [key]
                  properties:
                    key:
                      type: string
                      description: The Dify API key
                    mode:
                      type: string
                      enum: [cloud, self_hosted]
                      default: cloud
                      description: The mode of Dify API (cloud or self-hosted)
                description: List of Dify API configurations with key and mode.
      responses:
        "200":
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                $ref: "#/definitions/Project"
        "400":
          description: Bad request - missing required fields
        "500":
          description: Internal server error

  /api/projects:
    get:
      summary: List all projects (alternate endpoint)
      tags: [Project]
      operationId: controllers.project.list_all
      responses:
        "200":
          description: Success
        "500":
          description: Internal server error

  /api/project/get:
    get:
      summary: Get project details
      tags: [Project]
      operationId: controllers.project.get
      parameters:
        - name: id
          in: query
          required: true
          type: string
      responses:
        "200":
          description: Success
        "400":
          description: Missing project ID
        "404":
          description: Project not found
        "500":
          description: Internal server error

  /api/project/update:
    put:
      summary: Update project details
      tags: [Project]
      operationId: controllers.project.update
      parameters:
        - name: id
          in: query
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
      responses:
        "200":
          description: Success
        "400":
          description: Missing project ID or body
        "404":
          description: Project not found
        "500":
          description: Internal server error

  /api/project/delete:
    delete:
      summary: Delete a project
      tags: [Project]
      operationId: controllers.project.delete
      parameters:
        - name: id
          in: query
          required: true
          type: string
      responses:
        "200":
          description: Success
        "400":
          description: Missing project ID
        "404":
          description: Project not found
        "500":
          description: Internal server error

  /api/scenario/save:
    post:
      summary: Save test scenarios for a project
      tags: [Scenario]
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - project_id
              - scenarios
            properties:
              project_id:
                type: string
                description: Project ID
              scenarios:
                type: array
                items:
                  $ref: "#/definitions/Scenario"
      operationId: controllers.scenario.save_scenarios
      responses:
        "200":
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
        "400":
          description: Bad request - missing required fields
        "500":
          description: Internal server error

  /api/scenario/save_from_workflow:
    post:
      summary: Save test scenarios from workflow output
      tags: [Scenario]
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - project_id
              - workflow_output
            properties:
              project_id:
                type: string
                description: Project ID
              workflow_output:
                type: object
                description: Raw workflow output that will be transformed to match the new data structure
      operationId: controllers.scenario.save_scenarios_from_workflow
      responses:
        "200":
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
        "400":
          description: Bad request - missing required fields
        "500":
          description: Internal server error

  /api/scenario/create:
    post:
      summary: Create a new test scenario
      tags: [Scenario]
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - project_id
              - scenario_data
            properties:
              project_id:
                type: string
                description: Project ID
              scenario_data:
                type: object
                required:
                  - name
                  - description
                  - priority
                properties:
                  name:
                    type: string
                    description: Scenario name
                  description:
                    type: string
                    description: Scenario description
                  priority:
                    type: string
                    enum: [High, Medium, Low]
                    description: Scenario priority level
                  version:
                    type: string
                    description: Scenario version (optional, defaults to '1.0')
      operationId: controllers.scenario.create_scenario
      responses:
        "200":
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                $ref: "#/definitions/Scenario"
        "400":
          description: Bad request - missing required fields
        "500":
          description: Internal server error

  /api/scenario/list:
    get:
      summary: Get test scenarios for a project
      tags: [Scenario]
      produces:
        - application/json
      parameters:
        - name: project_id
          in: query
          required: true
          type: string
          description: Project ID
      operationId: controllers.scenario.get_scenarios
      responses:
        "200":
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                type: array
                items:
                  $ref: "#/definitions/Scenario"
        "400":
          description: Bad request - missing project_id
        "500":
          description: Internal server error

  /api/scenario/update:
    put:
      summary: Update a test scenario
      tags: [Scenario]
      consumes:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            required:
              - project_id
              - scenario_id
              - scenario_data
            properties:
              project_id:
                type: string
                description: Project ID
              scenario_id:
                type: string
                description: Scenario ID
              scenario_data:
                $ref: "#/definitions/Scenario"
      operationId: controllers.scenario.update_scenario
      responses:
        "200":
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
        "400":
          description: Bad request - missing required fields
        "404":
          description: Scenario not found
        "500":
          description: Internal server error

  /api/scenario/delete:
    delete:
      summary: Delete a test scenario
      tags: [Scenario]
      produces:
        - application/json
      parameters:
        - name: project_id
          in: query
          required: true
          type: string
          description: Project ID
        - name: scenario_id
          in: query
          required: true
          type: string
          description: Scenario ID
      operationId: controllers.scenario.delete_scenario
      responses:
        "200":
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
        "400":
          description: Bad request - missing required fields
        "404":
          description: Scenario not found
        "500":
          description: Internal server error

  /api/workflow/create:
    post:
      summary: Create a workflow
      tags: [Workflow]
      operationId: controllers.workflow.create_workflow
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [project_id, api_key]
            properties:
              project_id:
                type: string
              api_key:
                type: string
      responses:
        "200":
          description: Workflow created
        "400":
          description: Missing required fields
        "500":
          description: Internal server error

  /api/workflow/get:
    get:
      summary: Get workflow details
      tags: [Workflow]
      operationId: controllers.workflow.get_workflow
      parameters:
        - name: workflow_id
          in: query
          required: true
          type: string
      responses:
        "200":
          description: Success
        "400":
          description: Missing workflow_id
        "404":
          description: Workflow not found
        "500":
          description: Internal server error

  /api/workflow/update:
    put:
      summary: Update workflow
      tags: [Workflow]
      operationId: controllers.workflow.update_workflow
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [workflow_id, update_data]
            properties:
              workflow_id:
                type: string
              update_data:
                type: object
      responses:
        "200":
          description: Workflow updated
        "400":
          description: Missing workflow_id
        "500":
          description: Internal server error

  /api/workflow/delete:
    delete:
      summary: Delete workflow
      tags: [Workflow]
      operationId: controllers.workflow.delete_workflow
      parameters:
        - name: workflow_id
          in: query
          required: true
          type: string
      responses:
        "200":
          description: Workflow deleted
        "400":
          description: Missing workflow_id
        "500":
          description: Internal server error

  /api/workflow/list:
    get:
      summary: List workflows for a project
      tags: [Workflow]
      operationId: controllers.workflow.list_workflows
      parameters:
        - name: project_id
          in: query
          required: true
          type: string
      responses:
        "200":
          description: Success
        "500":
          description: Internal server error

  /api/workflow/execution_history:
    get:
      summary: Get execution history for a workflow
      tags: [Workflow]
      operationId: controllers.workflow.get_execution_history
      parameters:
        - name: workflow_id
          in: query
          required: true
          type: string
      responses:
        "200":
          description: Success
        "500":
          description: Internal server error

  /api/workflow/execution:
    get:
      summary: Get execution details
      tags: [Workflow]
      operationId: controllers.workflow.get_execution
      parameters:
        - name: execution_id
          in: query
          required: true
          type: string
      responses:
        "200":
          description: Success
        "400":
          description: Missing execution_id
        "404":
          description: Execution not found
        "500":
          description: Internal server error

  /api/workflow/execution_detail:
    get:
      summary: Get workflow execution detail
      tags: [Workflow]
      operationId: controllers.workflow.get_workflow_execution_detail
      parameters:
        - name: id
          in: query
          required: true
          type: string
      responses:
        "200":
          description: Success
        "404":
          description: Execution not found
        "500":
          description: Internal server error

  /api/workflow/executions_by_project:
    get:
      summary: List workflow executions by project
      tags: [Workflow]
      operationId: controllers.workflow.list_workflow_executions_by_project
      parameters:
        - name: project_id
          in: query
          required: true
          type: string
      responses:
        "200":
          description: Success
        "500":
          description: Internal server error

  /api/bug/create:
    post:
      summary: Create a new bug
      tags: [Bug]
      operationId: controllers.bug.create_bug
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [project_id, summary, description, severity]
            properties:
              project_id:
                type: string
              task_id:
                type: string
              scenario_id:
                type: string
              summary:
                type: string
              description:
                type: string
              severity:
                type: string
              status:
                type: string
                default: open
              created_by:
                type: string
                default: system
              environment:
                type: object
      responses:
        "200":
          description: Bug created successfully
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                $ref: "#/definitions/Bug"
        "400":
          description: Bad request - missing required fields
        "500":
          description: Internal server error

  /api/bug/create_batch:
    post:
      summary: Create multiple bugs in batch
      tags: [Bug]
      operationId: controllers.bug.create_bugs_batch
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [project_id, bugs]
            properties:
              project_id:
                type: string
                description: Project ID
              task_id:
                type: string
                description: Task ID (optional)
              scenario_id:
                type: string
                description: Scenario ID (optional)
              bugs:
                type: array
                description: Array of bugs to create
                items:
                  type: object
                  required: [summary, description, severity]
                  properties:
                    summary:
                      type: string
                      description: Bug summary
                    description:
                      type: string
                      description: Bug description
                    severity:
                      type: string
                      description: Bug severity level
                    status:
                      type: string
                      default: open
                      description: Bug status
                    created_by:
                      type: string
                      default: system
                      description: Bug creator
                    environment:
                      type: object
                      description: Environment information
      responses:
        "200":
          description: Bugs created successfully
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                type: object
                properties:
                  project_id:
                    type: string
                  task_id:
                    type: string
                  scenario_id:
                    type: string
                  bugs:
                    type: array
                    items:
                      $ref: "#/definitions/Bug"
                  total_created:
                    type: integer
        "400":
          description: Bad request - missing required fields or invalid bugs array
        "500":
          description: Internal server error

  /api/bug/list:
    get:
      summary: Get all bugs for a project
      tags: [Bug]
      operationId: controllers.bug.get_bugs
      parameters:
        - name: project_id
          in: query
          required: true
          type: string
        - name: status
          in: query
          type: string
        - name: severity
          in: query
          type: string
        - name: task_id
          in: query
          type: string
        - name: scenario_id
          in: query
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                type: array
                items:
                  $ref: "#/definitions/Bug"
        "400":
          description: Bad request - missing project_id
        "500":
          description: Internal server error

  /api/bug/get:
    get:
      summary: Get bug details
      tags: [Bug]
      operationId: controllers.bug.get_bug
      parameters:
        - name: bug_id
          in: query
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                $ref: "#/definitions/Bug"
        "400":
          description: Bad request - missing bug_id
        "404":
          description: Bug not found
        "500":
          description: Internal server error

  /api/bug/update:
    put:
      summary: Update bug information
      tags: [Bug]
      operationId: controllers.bug.update_bug
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [bug_id]
            properties:
              bug_id:
                type: string
              summary:
                type: string
              description:
                type: string
              status:
                type: string
              severity:
                type: string
      responses:
        "200":
          description: Bug updated successfully
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                $ref: "#/definitions/Bug"
        "400":
          description: Bad request - missing bug_id
        "404":
          description: Bug not found
        "500":
          description: Internal server error

  /api/bug/delete:
    delete:
      summary: Delete a bug
      tags: [Bug]
      operationId: controllers.bug.delete_bug
      parameters:
        - name: bug_id
          in: query
          required: true
          type: string
      responses:
        "200":
          description: Bug deleted successfully
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
        "400":
          description: Bad request - missing bug_id
        "404":
          description: Bug not found
        "500":
          description: Internal server error

  /api/bug/fix/create:
    post:
      summary: Create a bug fix record
      tags: [Bug]
      operationId: controllers.bug.create_bug_fix
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [bug_id, fix_description, fixed_by]
            properties:
              bug_id:
                type: string
              fix_description:
                type: string
              fixed_by:
                type: string
              fix_status:
                type: string
                default: pending
      responses:
        "200":
          description: Bug fix created successfully
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                $ref: "#/definitions/BugFix"
        "400":
          description: Bad request - missing required fields
        "500":
          description: Internal server error

  /api/bug/fix/verify:
    post:
      summary: Verify a bug fix
      tags: [Bug]
      operationId: controllers.bug.verify_bug_fix
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [fix_id, verified_by]
            properties:
              fix_id:
                type: string
              verified_by:
                type: string
              fix_status:
                type: string
                default: verified
      responses:
        "200":
          description: Bug fix verified successfully
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                $ref: "#/definitions/BugFix"
        "400":
          description: Bad request - missing required fields
        "404":
          description: Bug fix not found
        "500":
          description: Internal server error

  /api/bug/fix/list:
    get:
      summary: Get all fixes for a bug
      tags: [Bug]
      operationId: controllers.bug.get_bug_fixes
      parameters:
        - name: bug_id
          in: query
          required: true
          type: string
      responses:
        "200":
          description: Success
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                type: array
                items:
                  $ref: "#/definitions/BugFix"
        "400":
          description: Bad request - missing bug_id
        "500":
          description: Internal server error

  /api/workflow/upload_document:
    post:
      summary: Upload document to workflow
      tags: [Workflow]
      operationId: controllers.workflow.upload_document_to_workflow
      consumes:
        - multipart/form-data
      parameters:
        - name: workflow_id
          in: formData
          required: true
          type: string
        - name: file
          in: formData
          required: true
          type: file
      responses:
        "200":
          description: Document uploaded
        "400":
          description: Missing workflow_id or file
        "500":
          description: Internal server error

  /api/workflow/run:
    post:
      summary: Run Dify workflow
      tags: [Workflow]
      operationId: controllers.workflow.run_dify_workflow_controller
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [project_id, workflow_id, inputs]
            properties:
              project_id:
                type: string
              workflow_id:
                type: string
              inputs:
                type: object
              user:
                type: string
              response_mode:
                type: string
      responses:
        "200":
          description: Dify workflow run successful
        "400":
          description: Missing required fields
        "500":
          description: Internal server error

  /api/workflow/sync_workflow:
    get:
      summary: Sync workflow status from Dify
      tags: [Workflow]
      operationId: controllers.workflow.sync_workflow
      parameters:
        - name: workflow_id
          in: query
          required: true
          type: string
          description: Workflow ID
      responses:
        "200":
          description: Sync completed
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                type: object
                properties:
                  updated:
                    type: boolean
        "400":
          description: Missing workflow_id
        "404":
          description: Workflow not found
        "500":
          description: Internal server error

  /api/document/list_by_workflow:
    get:
      summary: List all documents for a given workflow_id
      tags: [Document]
      operationId: controllers.document.get_documents_by_workflow
      parameters:
        - name: workflow_id
          in: query
          required: true
          type: string
          description: Workflow ID
      responses:
        "200":
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                type: array
                items:
                  $ref: "#/definitions/Document"
        "400":
          description: Bad request - missing workflow_id
        "500":
          description: Internal server error

  /api/codex/repos:
    get:
      summary: Get list of repositories from Codex
      tags: [Codex]
      operationId: controllers.codex.get_repos
      responses:
        "200":
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                type: object
                properties:
                  repos:
                    type: array
                    items:
                      type: string
        "500":
          description: Internal server error

  /api/codex/run:
    post:
      summary: Submit prompt to Codex with repository and environment
      tags: [Codex]
      operationId: controllers.codex.run_codex
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [prompt, repo_label]
            properties:
              prompt:
                type: string
                description: The prompt to submit to Codex
              repo_label:
                type: string
                description: Repository label/name
              environment_id:
                type: string
                description: Environment identifier (optional)
      responses:
        "200":
          description: Prompt submitted successfully
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                type: object
                properties:
                  task_id:
                    type: string
                  prompt:
                    type: string
                  repo_label:
                    type: string
                  environment_id:
                    type: string
                  status:
                    type: string
                  created_at:
                    type: string
                    format: date-time
        "400":
          description: Bad request - missing required fields
        "500":
          description: Internal server error

  /api/codex/task/{task_id}:
    get:
      summary: Get task status and result by task ID
      tags: [Codex]
      operationId: controllers.codex.get_task
      parameters:
        - name: task_id
          in: path
          required: true
          type: string
          description: Task ID
      responses:
        "200":
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                type: object
                properties:
                  task_id:
                    type: string
                  status:
                    type: string
                  message:
                    type: string
        "400":
          description: Bad request - missing task_id
        "500":
          description: Internal server error

  /api/codex/task/submitted:
    get:
      summary: Get submitted tasks for a repository
      tags: [Codex]
      operationId: controllers.codex.get_task_submitted
      parameters:
        - name: repo_label
          in: query
          required: true
          type: string
          description: Repository label
      responses:
        "200":
          description: Successful operation
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                type: object
                properties:
                  submitted_tasks:
                    type: array
                    items:
                      type: object
        "400":
          description: Bad request - missing repo_label
        "500":
          description: Internal server error

  # FixChain API Endpoints
  /api/fixchain/import/bug:
    post:
      summary: Import bug data into FixChain
      tags: [FixChain]
      operationId: controllers.fixchain.import_bug
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [bug]
            properties:
              bug:
                $ref: "#/definitions/FixChainBug"
      responses:
        "200":
          description: Bug imported successfully
          schema:
            type: object
            properties:
              status:
                type: integer
              message:
                type: string
              result:
                type: object
        "400":
          description: Bad request - invalid input
        "500":
          description: Internal server error

  /api/fixchain/import/bugs/batch:
    post:
      summary: Import multiple bugs in batch
      tags: [FixChain]
      operationId: controllers.fixchain.import_bugs_batch
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [bugs]
            properties:
              bugs:
                type: array
                items:
                  $ref: "#/definitions/FixChainBug"
              batch_metadata:
                type: object
      responses:
        "200":
          description: Bugs imported successfully
        "400":
          description: Bad request - invalid input
        "500":
          description: Internal server error

  /api/fixchain/import/vectordb:
    post:
      summary: Import reasoning data into FixChain RAG
      tags: [FixChain]
      operationId: controllers.fixchain.import_vectordb
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [reasoning]
            properties:
              reasoning:
                $ref: "#/definitions/FixChainReasoning"
              generate_embedding:
                type: boolean
                default: false
              embedding_config:
                type: object
      responses:
        "200":
          description: Reasoning data imported successfully
        "400":
          description: Bad request - invalid input
        "500":
          description: Internal server error

  /api/fixchain/import/vectordb/batch:
    post:
      summary: Import multiple reasoning entries in batch
      tags: [FixChain]
      operationId: controllers.fixchain.import_vectordb_batch
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [reasoning_entries]
            properties:
              reasoning_entries:
                type: array
                items:
                  $ref: "#/definitions/FixChainReasoning"
              batch_metadata:
                type: object
              generate_embeddings:
                type: boolean
                default: false
      responses:
        "200":
          description: Reasoning entries imported successfully
        "400":
          description: Bad request - invalid input
        "500":
          description: Internal server error

  /api/fixchain/import/session:
    post:
      summary: Import execution session data
      tags: [FixChain]
      operationId: controllers.fixchain.import_session
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [session]
            properties:
              session:
                $ref: "#/definitions/FixChainSession"
      responses:
        "200":
          description: Session imported successfully
        "400":
          description: Bad request - invalid input
        "500":
          description: Internal server error

  /api/fixchain/import/bulk:
    post:
      summary: Bulk import mixed data (bugs, reasoning, sessions)
      tags: [FixChain]
      operationId: controllers.fixchain.bulk_import
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [data]
            properties:
              data:
                type: object
                properties:
                  bugs:
                    type: array
                    items:
                      $ref: "#/definitions/FixChainBug"
                  reasoning_entries:
                    type: array
                    items:
                      $ref: "#/definitions/FixChainReasoning"
                  sessions:
                    type: array
                    items:
                      $ref: "#/definitions/FixChainSession"
              options:
                type: object
              metadata:
                type: object
      responses:
        "200":
          description: Bulk import completed successfully
        "400":
          description: Bad request - invalid input
        "500":
          description: Internal server error

  /api/fixchain/search/bugs:
    get:
      summary: Search for similar bugs
      tags: [FixChain]
      operationId: controllers.fixchain.search_similar_bugs
      parameters:
        - name: source_file
          in: query
          type: string
        - name: bug_type
          in: query
          type: string
        - name: limit
          in: query
          type: integer
          default: 10
      responses:
        "200":
          description: Similar bugs found
        "500":
          description: Internal server error

  /api/fixchain/reasoning/history:
    get:
      summary: Get reasoning history for a file
      tags: [FixChain]
      operationId: controllers.fixchain.get_reasoning_history
      parameters:
        - name: source_file
          in: query
          type: string
        - name: test_name
          in: query
          type: string
      responses:
        "200":
          description: Reasoning history retrieved
        "500":
          description: Internal server error

  /api/fixchain/analytics/performance:
    get:
      summary: Get performance analytics
      tags: [FixChain]
      operationId: controllers.fixchain.get_performance_analytics
      parameters:
        - name: source_file
          in: query
          type: string
        - name: from_date
          in: query
          type: string
          format: date-time
        - name: to_date
          in: query
          type: string
          format: date-time
      responses:
        "200":
          description: Performance analytics retrieved
        "500":
          description: Internal server error

  # FixChain AI Service Direct Endpoints (Port 8000)
  /health:
    get:
      summary: FixChain service health check
      tags: [FixChain]
      operationId: controllers.ping.health
      responses:
        "200":
          description: Service is healthy
          schema:
            type: object
            properties:
              status:
                type: string
                example: "healthy"
              timestamp:
                type: string
                format: date-time
              rag_store_connected:
                type: boolean
        "503":
          description: Service unavailable

  /api/reasoning/add:
    post:
      summary: Add reasoning entry to RAG store
      tags: [FixChain]
      operationId: controllers.fixchain.add_reasoning
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [content, metadata]
            properties:
              content:
                type: string
                description: The reasoning content
              metadata:
                type: object
                description: Additional metadata for the entry
      responses:
        "200":
          description: Reasoning entry added successfully
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              doc_id:
                type: string
                description: Document ID of the added entry
        "500":
          description: Internal server error
        "503":
          description: RAG store not available

  /api/reasoning/search:
    post:
      summary: Search for similar reasoning entries
      tags: [FixChain]
      operationId: controllers.fixchain.search_reasoning
      consumes:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            required: [query]
            properties:
              query:
                type: string
                description: Search query
              k:
                type: integer
                default: 5
                description: Number of results to return
              filter_criteria:
                type: object
                description: Optional filter criteria
      responses:
        "200":
          description: Search results
          schema:
            type: array
            items:
              type: object
              properties:
                content:
                  type: string
                metadata:
                  type: object
                score:
                  type: number
                  format: float
        "500":
          description: Internal server error
        "503":
          description: RAG store not available

  /api/reasoning/stats:
    get:
      summary: Get RAG collection statistics
      tags: [FixChain]
      operationId: controllers.fixchain.get_stats
      responses:
        "200":
          description: Collection statistics
          schema:
            type: object
            properties:
              total_documents:
                type: integer
              collection_name:
                type: string
              database_name:
                type: string
              indexes:
                type: array
                items:
                  type: object
        "500":
          description: Internal server error
        "503":
          description: RAG store not available

  /api/reasoning/{doc_id}:
    delete:
      summary: Delete a reasoning entry
      tags: [FixChain]
      operationId: controllers.fixchain.delete_reasoning
      parameters:
        - name: doc_id
          in: path
          required: true
          type: string
          description: Document ID to delete
      responses:
        "200":
          description: Entry deleted successfully
          schema:
            type: object
            properties:
              status:
                type: string
                example: "success"
              message:
                type: string
                example: "Entry deleted"
        "404":
          description: Entry not found
        "500":
          description: Internal server error
        "503":
          description: RAG store not available


definitions:
  Project:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      owner:
        type: string
      status:
        type: string

  ProjectDetail:
    type: object
    properties:
      project:
        $ref: "#/definitions/Project"
      scenarios:
        type: array
        items:
          $ref: "#/definitions/Scenario"

  Document:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      url:
        type: string

  Scenario:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      priority:
        type: string
      version:
        type: string

  Workflow:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      project_id:
        type: string

  WorkflowExecution:
    type: object
    properties:
      id:
        type: string
      project_id:
        type: string
      workflow_id:
        type: string
      status:
        type: string
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time

  Bug:
    type: object
    properties:
      id:
        type: string
      project_id:
        type: string
      task_id:
        type: string
      scenario_id:
        type: string
      summary:
        type: string
      description:
        type: string
      severity:
        type: string
      status:
        type: string
      created_by:
        type: string
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time
      environment:
        type: object

  BugFix:
    type: object
    properties:
      id:
        type: string
      bug_id:
        type: string
      fix_description:
        type: string
      fixed_by:
        type: string
      fix_status:
        type: string
      created_at:
        type: string
        format: date-time
      updated_at:
        type: string
        format: date-time

  # FixChain Definitions
  FixChainBug:
    type: object
    required:
      - source_file
      - bug_type
      - severity
      - line_number
      - description
      - status
    properties:
      bug_id:
        type: string
        description: Unique identifier for the bug
      source_file:
        type: string
        description: Path to the source file containing the bug
      bug_type:
        type: string
        description: Type of bug detected
      severity:
        type: string
        description: Severity level of the bug
      line_number:
        type: integer
        description: Line number where the bug is located
      column_number:
        type: integer
        description: Column number where the bug is located
      description:
        type: string
        description: Detailed description of the bug
      code_snippet:
        type: string
        description: Code snippet containing the bug
      suggested_fix:
        type: string
        x-nullable: true
        description: AI-suggested fix for the bug
      actual_fix:
        type: string
        x-nullable: true
        description: Actual fix applied by human
      detection_method:
        type: string
        enum: [static_analysis, dynamic_analysis, manual_review, ai_detection]
        default: manual_review
        description: Method used to detect the bug
      ai_confidence:
        type: number
        x-nullable: true
        minimum: 0
        maximum: 1
        description: AI confidence score for bug detection
      detection_iteration:
        type: integer
        x-nullable: true
        description: Iteration number when bug was detected
      fix_iteration:
        type: integer
        x-nullable: true
        description: Iteration number when bug was fixed
      status:
        type: string
        enum: [detected, in_progress, fixed, verified, false_positive]
        description: Current status of the bug
      human_feedback:
        type: object
        x-nullable: true
        properties:
          accuracy:
            type: string
            enum: [correct, incorrect, partially_correct]
          usefulness:
            type: string
            enum: [very_useful, useful, somewhat_useful, not_useful]
          comments:
            type: string
          reviewer:
            type: string
          review_date:
            type: string
            format: date-time
        description: Human feedback on bug detection and fix
      related_bugs:
        type: array
        items:
          type: string
        description: List of related bug IDs
      fix_impact:
        type: object
        x-nullable: true
        properties:
          lines_changed:
            type: integer
          files_affected:
            type: array
            items:
              type: string
          test_results:
            type: object
        description: Impact analysis of the bug fix

  FixChainReasoning:
    type: object
    required:
      - test_name
      - attempt_id
      - source_file
      - status
      - summary
      - output
    properties:
      test_name:
        type: string
        description: Name of the test being executed
      attempt_id:
        type: string
        description: Unique identifier for this test attempt
      source_file:
        type: string
        description: Path to the source file being tested
      status:
        type: string
        enum: [passed, failed, error, skipped]
        description: Status of the test execution
      summary:
        type: string
        description: Summary of the test reasoning
      output:
        type: string
        description: Detailed output from the test execution
      metadata:
        type: object
        properties:
          execution_time:
            type: number
            description: Time taken to execute the test (in seconds)
          memory_usage:
            type: number
            description: Memory usage during test execution (in MB)
          ai_model:
            type: string
            description: AI model used for reasoning
          reasoning_steps:
            type: array
            items:
              type: string
            description: Step-by-step reasoning process
        description: Additional metadata about the test execution
      embedding:
        type: array
        items:
          type: number
        description: Vector embedding of the reasoning content
      human_verified:
        type: boolean
        default: false
        description: Whether this reasoning has been verified by a human
      verification_result:
        type: object
        properties:
          is_correct:
            type: boolean
          confidence:
            type: number
            minimum: 0
            maximum: 1
          feedback:
            type: string
          verifier:
            type: string
          verification_date:
            type: string
            format: date-time
        description: Human verification result

  FixChainSession:
    type: object
    required:
      - source_file
      - session_number
      - start_time
      - end_time
      - total_duration
      - bugs_detected
      - bugs_fixed
      - overall_status
    properties:
      session_id:
        type: string
        description: Unique identifier for the execution session
      source_file:
        type: string
        description: Path to the source file being processed
      session_number:
        type: integer
        description: Sequential number of this session
      test_types:
        type: array
        items:
          type: string
          enum: [unit_test, integration_test, performance_test, security_test]
        description: Types of tests executed in this session
      start_time:
        type: string
        format: date-time
        description: Session start time
      end_time:
        type: string
        format: date-time
        description: Session end time
      total_duration:
        type: number
        description: Total duration of the session (in seconds)
      total_tokens_used:
        type: integer
        description: Total AI tokens consumed during the session
      bugs_detected:
        type: integer
        description: Number of bugs detected in this session
      bugs_fixed:
        type: integer
        description: Number of bugs fixed in this session
      new_bugs_introduced:
        type: integer
        default: 0
        description: Number of new bugs introduced during fixes
      overall_status:
        type: string
        enum: [success, partial_success, failure]
        description: Overall status of the session
      performance_metrics:
        type: object
        properties:
          accuracy_rate:
            type: number
            minimum: 0
            maximum: 1
            description: Accuracy rate of bug detection
          false_positive_rate:
            type: number
            minimum: 0
            maximum: 1
            description: False positive rate
          fix_success_rate:
            type: number
            minimum: 0
            maximum: 1
            description: Success rate of bug fixes
          average_fix_time:
            type: number
            description: Average time to fix a bug (in seconds)
        description: Performance metrics for this session
      comparison_with_previous:
        type: object
        properties:
          accuracy_improvement:
            type: number
            description: Improvement in accuracy compared to previous session
          time_improvement:
            type: number
            description: Improvement in execution time compared to previous session
          bugs_improvement:
            type: number
            description: Improvement in bug detection compared to previous session
        description: Comparison metrics with previous session
